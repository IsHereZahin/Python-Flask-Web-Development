[
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.91341af086f6_",
        "description": "migrations.versions.91341af086f6_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todo',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('title', sa.String(length=100), nullable=True),\n    sa.Column('completed', sa.Boolean(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###\ndef downgrade():",
        "detail": "migrations.versions.91341af086f6_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.91341af086f6_",
        "description": "migrations.versions.91341af086f6_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('todo')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.91341af086f6_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "migrations.versions.91341af086f6_",
        "description": "migrations.versions.91341af086f6_",
        "peekOfCode": "revision = '91341af086f6'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todo',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('title', sa.String(length=100), nullable=True),\n    sa.Column('completed', sa.Boolean(), nullable=True),",
        "detail": "migrations.versions.91341af086f6_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "migrations.versions.91341af086f6_",
        "description": "migrations.versions.91341af086f6_",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todo',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('title', sa.String(length=100), nullable=True),\n    sa.Column('completed', sa.Boolean(), nullable=True),\n    sa.PrimaryKeyConstraint('id')",
        "detail": "migrations.versions.91341af086f6_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "migrations.versions.91341af086f6_",
        "description": "migrations.versions.91341af086f6_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todo',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('title', sa.String(length=100), nullable=True),\n    sa.Column('completed', sa.Boolean(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )",
        "detail": "migrations.versions.91341af086f6_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "migrations.versions.91341af086f6_",
        "description": "migrations.versions.91341af086f6_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('todo',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('title', sa.String(length=100), nullable=True),\n    sa.Column('completed', sa.Boolean(), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.91341af086f6_",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class Todo(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    completed = db.Column(db.Boolean, default=False)\n# Route for the Todo page\n@app.route(\"/todo\", methods=[\"GET\", \"POST\"])\ndef todo():\n    if request.method == \"POST\":\n        title = request.form[\"title\"]\n        new_task = Todo(title=title)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home():\n    return render_template('index.html', data=datas)\n# Route for the About page\n@app.route(\"/about\")\ndef about():\n    return render_template('about.html')\n# Database model for Todo tasks\nclass Todo(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def about():\n    return render_template('about.html')\n# Database model for Todo tasks\nclass Todo(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    completed = db.Column(db.Boolean, default=False)\n# Route for the Todo page\n@app.route(\"/todo\", methods=[\"GET\", \"POST\"])\ndef todo():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "todo",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def todo():\n    if request.method == \"POST\":\n        title = request.form[\"title\"]\n        new_task = Todo(title=title)\n        db.session.add(new_task)\n        db.session.commit()\n        return redirect(url_for('todo'))\n    # Fetch all tasks from the database\n    tasks = Todo.query.all()\n    # Define the data dictionary",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "deletetask",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def deletetask(taskid):\n    task_to_delete = Todo.query.get(taskid)\n    if task_to_delete:\n        db.session.delete(task_to_delete)\n        db.session.commit()\n    return redirect(url_for('todo'))\n@app.route(\"/task/edit/<int:taskid>\", methods=[\"GET\", \"POST\"])\ndef edit_task(taskid):\n    task_to_edit = Todo.query.get(taskid)\n    if not task_to_edit:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "edit_task",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def edit_task(taskid):\n    task_to_edit = Todo.query.get(taskid)\n    if not task_to_edit:\n        return redirect(url_for('todo'))  # Redirect if task not found\n    if request.method == \"POST\":\n        task_to_edit.title = request.form[\"title\"]\n        task_to_edit.completed = request.form.get(\"completed\") == \"True\"\n        db.session.commit()\n        return redirect(url_for('todo'))\n    return render_template(\"edit_task.html\", task=task_to_edit)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'\napp.config['SECRET_KEY'] = '02cb294d2689485d8910bb850d9bc2e2'\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n# Route for the home page\ndatas = {\n    \"name\": \"Zahin\",\n    \"numbers\": [1, 2, 3, 4, 5, 6, 7, 8, 9]\n}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'\napp.config['SECRET_KEY'] = '02cb294d2689485d8910bb850d9bc2e2'\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n# Route for the home page\ndatas = {\n    \"name\": \"Zahin\",\n    \"numbers\": [1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n@app.route(\"/\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SECRET_KEY'] = '02cb294d2689485d8910bb850d9bc2e2'\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n# Route for the home page\ndatas = {\n    \"name\": \"Zahin\",\n    \"numbers\": [1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n@app.route(\"/\")\n@app.route(\"/home\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n# Route for the home page\ndatas = {\n    \"name\": \"Zahin\",\n    \"numbers\": [1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n@app.route(\"/\")\n@app.route(\"/home\")\ndef home():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "migrate = Migrate(app, db)\n# Route for the home page\ndatas = {\n    \"name\": \"Zahin\",\n    \"numbers\": [1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n@app.route(\"/\")\n@app.route(\"/home\")\ndef home():\n    return render_template('index.html', data=datas)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "datas",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "datas = {\n    \"name\": \"Zahin\",\n    \"numbers\": [1, 2, 3, 4, 5, 6, 7, 8, 9]\n}\n@app.route(\"/\")\n@app.route(\"/home\")\ndef home():\n    return render_template('index.html', data=datas)\n# Route for the About page\n@app.route(\"/about\")",
        "detail": "app",
        "documentation": {}
    }
]